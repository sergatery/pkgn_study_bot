import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from states import AdminStates
from database import get_db_connection
from keyboards import (
    get_admin_keyboard, 
    get_cancel_keyboard, 
    get_yes_no_keyboard, 
    get_back_keyboard
)
import json

router = Router()
logger = logging.getLogger(__name__)

async def parse_datetime(message: Message, text: str) -> datetime | None:
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        return datetime.strptime(text, "%d.%m.%Y %H:%M")
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ü—Ä–∏–º–µ—Ä: 31.12.2023 14:30",
            reply_markup=get_cancel_keyboard()
        )
        return None

def validate_questions(questions: list) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤"""
    if not isinstance(questions, list):
        return False
        
    for q in questions:
        if not isinstance(q, dict):
            return False
        if not all(k in q for k in ['text', 'options', 'correct']):
            return False
        if not isinstance(q['options'], list) or len(q['options']) < 2:
            return False
        if not isinstance(q['correct'], int) or q['correct'] < 0 or q['correct'] >= len(q['options']):
            return False
            
    return True

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ú–ï–ù–´ –î–õ–Ø –í–°–ï–• –†–ê–ó–î–ï–õ–û–í =====
@router.message(
    StateFilter(
        # –¢–µ—Å—Ç—ã
        AdminStates.waiting_for_test_title,
        AdminStates.waiting_for_test_description,
        AdminStates.waiting_for_question_text,
        AdminStates.waiting_for_question_options,
        AdminStates.waiting_for_question_correct,
        AdminStates.waiting_for_more_questions,
        AdminStates.waiting_for_test_start_time,
        AdminStates.waiting_for_test_end_time,
        # –î–ó
        AdminStates.waiting_for_hw_title,
        AdminStates.waiting_for_hw_description,
        # –õ–µ–∫—Ü–∏–∏
        AdminStates.waiting_for_lecture_title,
        AdminStates.waiting_for_lecture_description,
        AdminStates.waiting_for_lecture_content,
        # –ö–∞–ª–µ–Ω–¥–∞—Ä—å
        AdminStates.waiting_for_event_title,
        AdminStates.waiting_for_event_description,
        AdminStates.waiting_for_event_date
    ),
    F.text == "‚ùå –û—Ç–º–µ–Ω–∞"
)
async def cancel_creation(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_admin_keyboard()
    )

@router.message(F.text == "üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def admin_panel(message: Message, state: FSMContext):
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=get_admin_keyboard()
    )

# ===== –¢–ï–°–¢–´ =====
@router.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç")
async def create_test_start(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_test_title)
    await state.update_data(questions=[])

@router.message(AdminStates.waiting_for_test_title)
async def process_test_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_test_description)

@router.message(AdminStates.waiting_for_test_description)
async def process_test_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_question_text)

@router.message(AdminStates.waiting_for_question_text)
async def process_question_text(message: Message, state: FSMContext):
    await state.update_data(current_question={"text": message.text})
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n–ü—Ä–∏–º–µ—Ä: –í–∞—Ä–∏–∞–Ω—Ç 1, –í–∞—Ä–∏–∞–Ω—Ç 2, –í–∞—Ä–∏–∞–Ω—Ç 3",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_question_options)

@router.message(AdminStates.waiting_for_question_options)
async def process_question_options(message: Message, state: FSMContext):
    options = [opt.strip() for opt in message.text.split(",") if opt.strip()]
    if len(options) < 2:
        await message.answer("‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    data = await state.get_data()
    current_question = data.get("current_question", {})
    current_question["options"] = options
    await state.update_data(current_question=current_question)
    
    options_text = "\n".join(f"{i+1}. {opt}" for i, opt in enumerate(options))
    await message.answer(
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã:\n{options_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (1, 2, 3...):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_question_correct)

@router.message(AdminStates.waiting_for_question_correct)
async def process_question_correct(message: Message, state: FSMContext):
    try:
        correct = int(message.text) - 1
        data = await state.get_data()
        current_question = data.get("current_question", {})
        options = current_question.get("options", [])
        
        if correct < 0 or correct >= len(options):
            raise ValueError
        
        question = {
            "text": current_question["text"],
            "options": options,
            "correct": correct
        }
        
        questions = data.get("questions", [])
        questions.append(question)
        await state.update_data(questions=questions, current_question=None)
        
        await message.answer(
            "‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω! –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å?",
            reply_markup=get_yes_no_keyboard()
        )
        await state.set_state(AdminStates.waiting_for_more_questions)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞:")

@router.message(AdminStates.waiting_for_more_questions, F.text == "‚úÖ –î–∞")
async def add_more_questions(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_question_text)

@router.message(AdminStates.waiting_for_more_questions, F.text == "‚ùå –ù–µ—Ç")
async def finish_questions(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data.get('questions'):
        await message.answer("‚ùå –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å!", reply_markup=get_cancel_keyboard())
        return
        
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_test_start_time)

@router.message(AdminStates.waiting_for_test_start_time)
async def process_test_start_time(message: Message, state: FSMContext):
    start_time = await parse_datetime(message, message.text)
    if not start_time:
        return
        
    if start_time < datetime.now():
        await message.answer("‚ùå –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º! –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
        
    await state.update_data(start_time=start_time)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_test_end_time)

@router.message(AdminStates.waiting_for_test_end_time)
async def process_test_end_time(message: Message, state: FSMContext):
    end_time = await parse_datetime(message, message.text)
    if not end_time:
        return
        
    data = await state.get_data()
    start_time = data.get('start_time')
    
    if end_time <= start_time:
        await message.answer("‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞! –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
        
    await save_test_to_db(message, state, start_time, end_time)

async def save_test_to_db(message: Message, state: FSMContext, start_time: datetime, end_time: datetime):
    conn = None
    try:
        data = await state.get_data()
        questions = data.get('questions', [])
        
        if not validate_questions(questions):
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö —Ç–µ—Å—Ç–∞! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
            
        questions_json = json.dumps(questions, ensure_ascii=False)
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute(
            """INSERT INTO tests 
            (title, description, questions, start_time, end_time, created_by) 
            VALUES (?, ?, ?, ?, ?, ?)""",
            (
                data['title'],
                data['description'],
                questions_json,
                start_time.strftime("%Y-%m-%d %H:%M:%S"),
                end_time.strftime("%Y-%m-%d %H:%M:%S"),
                message.from_user.id
            )
        )
        conn.commit()
        
        await message.answer(
            f"‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
            f"üìÖ –ù–∞—á–∞–ª–æ: {start_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}", exc_info=True)
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞",
            reply_markup=get_admin_keyboard()
        )
    finally:
        if conn:
            conn.close()
        await state.clear()

# ===== –î–û–ú–ê–®–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø =====
@router.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –î–ó")
async def add_homework_start(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_hw_title)

@router.message(AdminStates.waiting_for_hw_title)
async def process_hw_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_hw_description)

@router.message(AdminStates.waiting_for_hw_description, F.content_type.in_({ContentType.TEXT, ContentType.DOCUMENT, ContentType.PHOTO}))
async def process_hw_description(message: Message, state: FSMContext):
    data = await state.get_data()
    
    description = message.text if message.text else ""
    file_id = None
    file_type = None
    
    if message.document:
        file_id = message.document.file_id
        file_type = "document"
    elif message.photo:
        file_id = message.photo[-1].file_id
        file_type = "photo"
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute(
            "INSERT INTO homework (title, description, created_by) VALUES (?, ?, ?)",
            (data['title'], description, message.from_user.id)
        )
        
        if file_id:
            hw_id = cursor.lastrowid
            cursor.execute(
                "INSERT INTO homework_submissions (hw_id, user_id, file_id) VALUES (?, ?, ?)",
                (hw_id, message.from_user.id, file_id)
            )
        
        conn.commit()
        await message.answer(
            f"–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ '{data['title']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –î–ó: {e}", exc_info=True)
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –î–ó",
            reply_markup=get_admin_keyboard()
        )
    finally:
        conn.close()
        await state.clear()

# ===== –õ–ï–ö–¶–ò–ò =====
@router.message(F.text == "üìö –î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫—Ü–∏—é")
async def add_lecture_start(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_lecture_title)

@router.message(AdminStates.waiting_for_lecture_title)
async def process_lecture_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_lecture_description)

@router.message(AdminStates.waiting_for_lecture_description)
async def process_lecture_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–µ–∫—Ü–∏–∏ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª—ã). "
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–ì–æ—Ç–æ–≤–æ', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
        reply_markup=get_back_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_lecture_content)

@router.message(AdminStates.waiting_for_lecture_content, F.text == "–ì–æ—Ç–æ–≤–æ")
async def finish_lecture_creation(message: Message, state: FSMContext):
    data = await state.get_data()
    
    if 'lecture_content' not in data or len(data['lecture_content']) == 0:
        await message.answer("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –ª–µ–∫—Ü–∏—é. –î–æ–±–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.")
        return
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute(
            "INSERT INTO lecture_materials (title, description, created_by) VALUES (?, ?, ?)",
            (data['title'], data['description'], message.from_user.id)
        )
        material_id = cursor.lastrowid
        
        for order_num, content in enumerate(data['lecture_content'], 1):
            if content['type'] == 'text':
                cursor.execute(
                    "INSERT INTO lecture_content (material_id, message, order_num) VALUES (?, ?, ?)",
                    (material_id, content['content'], order_num)
                )
            else:
                cursor.execute(
                    "INSERT INTO lecture_content (material_id, file_id, file_type, order_num) VALUES (?, ?, ?, ?)",
                    (material_id, content['content'], content['type'], order_num)
                )
        
        conn.commit()
        await message.answer(
            f"–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª '{data['title']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–µ–∫—Ü–∏–∏: {e}", exc_info=True)
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–µ–∫—Ü–∏–∏",
            reply_markup=get_admin_keyboard()
        )
    finally:
        conn.close()
        await state.clear()

@router.message(AdminStates.waiting_for_lecture_content, F.content_type == ContentType.TEXT)
async def add_text_to_lecture(message: Message, state: FSMContext):
    data = await state.get_data()
    content = {'type': 'text', 'content': message.text}
    
    if 'lecture_content' not in data:
        await state.update_data(lecture_content=[content])
    else:
        lecture_content = data['lecture_content']
        lecture_content.append(content)
        await state.update_data(lecture_content=lecture_content)
    
    await message.answer(
        "–¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–µ–∫—Ü–∏—é. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=get_back_keyboard()
    )

@router.message(AdminStates.waiting_for_lecture_content, F.content_type.in_({ContentType.DOCUMENT, ContentType.PHOTO, ContentType.VIDEO, ContentType.AUDIO}))
async def add_file_to_lecture(message: Message, state: FSMContext):
    data = await state.get_data()
    content = {}
    
    if message.document:
        content = {'type': 'document', 'content': message.document.file_id}
    elif message.photo:
        content = {'type': 'photo', 'content': message.photo[-1].file_id}
    elif message.video:
        content = {'type': 'video', 'content': message.video.file_id}
    elif message.audio:
        content = {'type': 'audio', 'content': message.audio.file_id}
    
    if 'lecture_content' not in data:
        await state.update_data(lecture_content=[content])
    else:
        lecture_content = data['lecture_content']
        lecture_content.append(content)
        await state.update_data(lecture_content=lecture_content)
    
    await message.answer(
        "–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–µ–∫—Ü–∏—é. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=get_back_keyboard()
    )

# ===== –ö–ê–õ–ï–ù–î–ê–†–¨ =====
@router.message(F.text == "üìÖ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
async def add_event_start(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_event_title)

@router.message(AdminStates.waiting_for_event_title)
async def process_event_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_event_description)

@router.message(AdminStates.waiting_for_event_description)
async def process_event_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_event_date)

@router.message(AdminStates.waiting_for_event_date)
async def process_event_date(message: Message, state: FSMContext):
    try:
        event_date = datetime.strptime(message.text, "%d.%m.%Y").date()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: 31.12.2023")
        return
    
    data = await state.get_data()
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute(
            "INSERT INTO calendar_events (title, description, event_date, created_by) VALUES (?, ?, ?, ?)",
            (data['title'], data['description'], event_date, message.from_user.id)
        )
        conn.commit()
        await message.answer(
            f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{data['title']}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {event_date.strftime('%d.%m.%Y')}!",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}", exc_info=True)
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è",
            reply_markup=get_admin_keyboard()
        )
    finally:
        conn.close()
        await state.clear()