from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import logging

def get_role_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë®‚Äçüéì –Ø —Å—Ç—É–¥–µ–Ω—Ç")],
            [KeyboardButton(text="üë®‚Äçüè´ –Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")]
        ],
        resize_keyboard=True
    )

def get_main_keyboard(is_teacher=False):
    print(f"–§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è {'–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è' if is_teacher else '—Å—Ç—É–¥–µ–Ω—Ç–∞'}")  # –õ–æ–≥
    
    buttons = [
        [KeyboardButton(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")],
        [KeyboardButton(text="üìö –õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")],
    ]
    
    if not is_teacher:
        buttons.extend([
            [KeyboardButton(text="üìù –¢–µ—Å—Ç—ã")],
            [KeyboardButton(text="üìù –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")]
        ])
    else:
        buttons.append([KeyboardButton(text="üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")])
    
    print(buttons)  # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–Ω–æ–ø–æ–∫
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_admin_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÖ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")],
            [KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç")],
            [KeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –î–ó")],
            [KeyboardButton(text="üìö –î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫—Ü–∏—é")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_cancel_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )

def get_back_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
            [KeyboardButton(text="–ì–æ—Ç–æ–≤–æ")]
        ],
        resize_keyboard=True
    )

def get_yes_no_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –î–∞")],
            [KeyboardButton(text="‚ùå –ù–µ—Ç")]
        ],
        resize_keyboard=True
    )

def get_tests_keyboard(tests):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for test in tests:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ datetime, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            end_time = test[4]
            if end_time and isinstance(end_time, str):
                from datetime import datetime
                end_time = datetime.strptime(end_time, "%Y-%m-%d %H:%M:%S")
            
            end_time_str = end_time.strftime('%d.%m.%Y %H:%M') if end_time and hasattr(end_time, 'strftime') else "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
            
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"{test[1]} (–¥–æ {end_time_str})",
                    callback_data=f"test_{test[0]}"  # test[0] - ID —Ç–µ—Å—Ç–∞
                )
            ])
        except Exception as e:
            continue
            
    return keyboard if keyboard.inline_keyboard else None

def get_homeworks_keyboard(homeworks):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –î–ó"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for hw in homeworks:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=hw[1],  # hw[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ –î–ó
                callback_data=f"hw_{hw[0]}"  # hw[0] - ID –∑–∞–¥–∞–Ω–∏—è
            )
        ])
    return keyboard if keyboard.inline_keyboard else None

def get_lectures_keyboard(lectures):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –ª–µ–∫—Ü–∏–π"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for lecture in lectures:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=lecture[1],  # lecture[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–∏
                callback_data=f"lecture_{lecture[0]}"  # lecture[0] - ID –ª–µ–∫—Ü–∏–∏
            )
        ])
    return keyboard if keyboard.inline_keyboard else None